<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>buddyspike</title>
    <link>https://buddyspike.github.io/blog/</link>
    <description>Recent content on buddyspike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 Oct 2017 09:28:47 +1100</lastBuildDate>
    
	<atom:link href="https://buddyspike.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building Modular Systems with mbt</title>
      <link>https://buddyspike.github.io/blog/post/building-modular-systems-with-mbt/</link>
      <pubDate>Sat, 07 Oct 2017 09:28:47 +1100</pubDate>
      
      <guid>https://buddyspike.github.io/blog/post/building-modular-systems-with-mbt/</guid>
      <description>Large systems are usually constructed by composing many small systems. My favorite browser for example distributes its work across different processes while I&amp;rsquo;m conveniently enjoying my morning dose of hacker news. This also applies to server side systems with the added complexity of modules being distributed across multiple machines, built using different tool-chains etc.
Modularisation is great as it gives us the ability to reduce coupling and cohesion. However, ultimately, we are only interested in the overall state of the system rather than the individual modules.</description>
    </item>
    
    <item>
      <title>Go Channels</title>
      <link>https://buddyspike.github.io/blog/post/golang-channels/</link>
      <pubDate>Sun, 18 Jun 2017 11:04:09 +1000</pubDate>
      
      <guid>https://buddyspike.github.io/blog/post/golang-channels/</guid>
      <description>Channels and goroutines in golang takes a novel approach to composing concurrent programs. Correct use of them leads us into writing more understandable concurrent code.
This is a compilation of little things that I find useful when using channels.
Fine-grained channel types Passing a reference to a channel as an argument to a goroutine is a common way to establish the communication link between them. When doing so, specifying a fine-grained channel type, makes it easier to reason about go routines.</description>
    </item>
    
  </channel>
</rss>